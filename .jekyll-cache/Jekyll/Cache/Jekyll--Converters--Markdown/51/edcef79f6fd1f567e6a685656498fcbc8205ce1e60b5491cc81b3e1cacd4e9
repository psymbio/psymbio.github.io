I"0Å<h2 id="morlet-wavelets-usage-and-python-implementation">Morlet Wavelets (Usage and Python Implementation)</h2>

<p>We might lose data while converting the signals of EEG from the time to frequency domain. That‚Äôs a short-coming of static spectral analyses, and so to be able to extract frequency specific information over time we use wavelet convolution.</p>

<p>What‚Äôs a wavelet?</p>

<div class="wikipedia">
A wavelet is a wave-like oscillation with an amplitude that begins at zero, increases or decreases, and then returns to zero one or more times. Wavelets are termed a "brief oscillation". A taxonomy of wavelets has been established, based on the number and direction of its pulses. Wavelets are imbued with specific properties that make them useful for signal processing.
</div>

<iframe src="https://www.desmos.com/calculator/lbzmlosf4g" width="100%" style="min-height:400px"></iframe>

<p>Yeah, there‚Äôs a bit of cheating, we can‚Äôt graph complex numbers in desmos and I‚Äôll probably have to look into plotting these another way, but for now the only online substitute is visit <a href="https://jutanium.github.io/ComplexNumberGrapher/">this</a> and type this: \(\cos (2\pi z)+z\sin (2\pi z)\) z(from Euler‚Äôs formula) and like all things complex, you must imagine yourself multiplying it with a gaussian and creating a morlet.</p>

<p>Euler‚Äôs formula for the basic waves \(e^{2\pi i \theta}\) is \(e^{2\pi i \theta} = cos(2\pi\theta) + i sin(2\pi\theta)\).</p>

<p>The Arctic Monkeys logo might be more mathematic than you think.</p>

<iframe src="https://www.desmos.com/calculator/uuv2ikwvev" width="100%" style="min-height:400px"></iframe>

<p>„Åã„Çè„ÅÑ„ÅÑ„Åß„Åô„Å≠üíÆ</p>

<p>Requirements for a wavelet: it integrates to zero or the sum total is zero over time and it tapers to zero in the beginning and the end.</p>

<p>Wavelets provide temporal specificity when used as weighting functions for signals, as when these signals are convoluted(sliding dot product between the kernel and the section of signal it‚Äôs aligned with) with the kernel(in this case the morlet wavelet).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">"figure.figsize"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">srate</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="c1"># changed time from [-1,1] to [-2,2] to get a better guassian resolution
</span><span class="n">time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">stop</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">)</span>
<span class="n">freq</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># using euler's to ceneter the sine at zero (it looks okay)
</span><span class="n">sine_wave</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">freq</span> <span class="o">*</span> <span class="n">time</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.1</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">freq</span> <span class="o">*</span> <span class="n">time</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_signal</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">x_label</span> <span class="o">=</span> <span class="s">"Time"</span><span class="p">,</span> <span class="n">y_label</span> <span class="o">=</span> <span class="s">"Amplitude"</span><span class="p">,</span> <span class="n">zoom</span> <span class="o">=</span> <span class="s">"no"</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">"#9F0D06"</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="n">x_label</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="n">y_label</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="s">'both'</span><span class="p">)</span>
    <span class="c1"># plt.axhline(y=0, color='k')
</span>    <span class="k">if</span> <span class="n">zoom</span> <span class="o">==</span> <span class="s">"yes"</span><span class="p">:</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">margins</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=-</span><span class="mf">0.001</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">40</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">sine_wave</span><span class="p">,</span> <span class="s">"Sine wave"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_4_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<p>We want to create a guassian with a full width at half maximum (FWHM), where the FWHM is the width of a line shape at half of its maximum amplitude, as shown below:</p>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/FWHM.svg" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># defining the gaussian
# full width at half maximum
</span><span class="n">fwhm</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">gaussian</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">((</span><span class="o">-</span><span class="mi">4</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">fwhm</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">gaussian</span><span class="p">,</span> <span class="s">"Gaussian"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_7_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># element-wise multiplication of the sine and gaussian
</span><span class="n">morlet_wavelet</span> <span class="o">=</span> <span class="n">sine_wave</span> <span class="o">*</span> <span class="n">gaussian</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">morlet_wavelet</span><span class="p">,</span> <span class="s">"Morlet Wavelet"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_9_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># looking at everything at once.
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">sine_wave</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">gaussian</span><span class="p">,</span> <span class="s">'y'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">morlet_wavelet</span><span class="p">,</span> <span class="s">'g'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Morlet Wavelet'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Amplitude'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="s">'both'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">axhline</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'k'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_10_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pnts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">mwX</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">fft</span><span class="p">.</span><span class="n">fft</span><span class="p">(</span><span class="n">morlet_wavelet</span><span class="p">)</span><span class="o">/</span><span class="n">pnts</span><span class="p">)</span>
<span class="n">hz</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">stop</span> <span class="o">=</span> <span class="n">srate</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="n">pnts</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">hz</span><span class="p">,</span> <span class="n">mwX</span><span class="p">,</span> <span class="s">"DFT"</span><span class="p">,</span> <span class="s">"Hz"</span><span class="p">,</span> <span class="s">"DFT Values"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_12_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">hz</span><span class="p">,</span> <span class="n">mwX</span><span class="p">,</span> <span class="s">"DFT"</span><span class="p">,</span> <span class="s">"Hz"</span><span class="p">,</span> <span class="s">"DFT Values"</span><span class="p">,</span> <span class="s">"yes"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_13_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">time_series</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"data.csv"</span><span class="p">)</span>
<span class="n">time_series_values</span> <span class="o">=</span> <span class="n">time_series</span><span class="p">[</span><span class="s">"value"</span><span class="p">].</span><span class="n">to_numpy</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">time_series_values</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values</span><span class="p">,</span> <span class="n">time_series_values</span><span class="p">)</span>
<span class="n">time_series_values</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values</span><span class="p">,</span> <span class="n">time_series_values</span><span class="p">)</span>
<span class="n">time_series_values</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values</span><span class="p">,</span> <span class="n">time_series_values</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">time_series_time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">stop</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">num</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">time_series_values</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_signal</span><span class="p">(</span><span class="n">time_series_time</span><span class="p">,</span> <span class="n">time_series_values</span><span class="p">,</span> <span class="s">"Signal"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_17_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">convoluted_signal</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">time_series_values</span><span class="p">,</span> <span class="n">morlet_wavelet</span><span class="p">,</span> <span class="s">'full'</span><span class="p">)</span>
<span class="n">plot_signal</span><span class="p">(</span><span class="n">time_series_time</span><span class="p">,</span> <span class="n">convoluted_signal</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">time_series_time</span><span class="p">)],</span> <span class="s">"Convoluted Signal"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_18_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">x3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>
<span class="n">x4</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
<span class="n">x5</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">*-</span><span class="mi">1</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([])</span>

<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x1</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x2</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x3</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x4</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x2</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x5</span><span class="p">)</span>
<span class="n">time_series_values_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">x2</span><span class="p">)</span>

<span class="n">time_series_time_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">))</span>

<span class="n">plot_signal</span><span class="p">(</span><span class="n">time_series_time_2</span><span class="p">,</span> <span class="n">time_series_values_2</span><span class="p">,</span> <span class="s">"Random Noise"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_19_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kernel_new</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="n">kernel_new</span> <span class="o">=</span> <span class="n">kernel_new</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">kernel_new</span><span class="p">)</span>
<span class="c1"># try these
# kernel_new = -1 * kernel_new
</span><span class="n">kernel_time</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">plot_signal</span><span class="p">(</span><span class="n">kernel_time</span><span class="p">,</span> <span class="n">kernel_new</span><span class="p">,</span> <span class="s">"Guassian Kernel"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_20_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># smooths out the signal
</span><span class="n">convoluted_signal</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">kernel_new</span><span class="p">,</span> <span class="s">'full'</span><span class="p">)</span>
<span class="n">plot_signal</span><span class="p">(</span><span class="n">time_series_time</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">convoluted_signal</span><span class="p">)],</span> <span class="n">convoluted_signal</span><span class="p">,</span> <span class="s">"Convoluted Signal"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_21_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># let's try building the edge detecting kernel
</span>
<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([])</span>
<span class="n">x6</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">x7</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x8</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x9</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span>

<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">,</span> <span class="n">x6</span><span class="p">)</span>
<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">,</span> <span class="n">x7</span><span class="p">)</span>
<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">,</span> <span class="n">x8</span><span class="p">)</span>
<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">,</span> <span class="n">x9</span><span class="p">)</span>
<span class="n">kernel_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">,</span> <span class="n">x6</span><span class="p">)</span>

<span class="n">kernel_time_edge</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">kernel_edge</span><span class="p">))</span>
<span class="n">plot_signal</span><span class="p">(</span><span class="n">kernel_time_edge</span><span class="p">,</span> <span class="n">kernel_edge</span><span class="p">,</span> <span class="s">"Edge Kernel"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_22_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># signed edge detecting kernel
</span>
<span class="n">convoluted_signal</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">time_series_values_2</span><span class="p">,</span> <span class="n">kernel_edge</span><span class="p">,</span> <span class="s">'full'</span><span class="p">)</span>
<span class="n">plot_signal</span><span class="p">(</span><span class="n">time_series_time</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">convoluted_signal</span><span class="p">)],</span> <span class="n">convoluted_signal</span><span class="p">,</span> <span class="s">"Convoluted Signal"</span><span class="p">)</span>
</code></pre></div></div>

<figure><img alt="image_alt" src="/images/2021/ants/basic-morlet-code/output_23_0.png" height="100%" width="100%" /><figcaption align="center"></figcaption></figure>

<p>Links:</p>

<p><a href="https://pythontic.com/visualization/charts/sinewave">graph stuff</a>
<a href="https://stackoverflow.com/questions/36286566/how-to-generate-noisy-mock-time-series-or-signal-in-python">time-series-or-signal-in-python</a>
<a href="http://mbonvini.github.io/TimeSeriesMaker/">random time series generator</a>
<a href="https://www.cs.princeton.edu/courses/archive/fall08/cos429/lecture_linear_filters_edge_detection.pdf">Edge Detecting Kernel</a>
<a href="https://homepages.inf.ed.ac.uk/rbf/HIPR2/log.htm"></a></p>

<p>This amplitude spectrum we gain after the fourier transform of the wavelet is symmetric, this isn‚Äôt the case when we deal with a complex valued wavelet. Also in the plot above, the Hz units are incorrect above the Nyquist (for plotting convenience).</p>

<p>Tip: don‚Äôt do time-domain convolutions as it can lead to errors, just use the fft function.</p>

<p>So like there‚Äôs a nifty detail about this type of convolution.</p>

<div class="admonition note">
<p class="admonition-title">The Convolution Theorem</p>
<p><div class="mermaid" align="center" height="70%" width="70%">
    flowchart LR
    A["Signal"]--&gt;|Convolution| C("Convoluted Signal")
    B["Kernel"]--&gt;|Convolution| C("Convoluted Signal")
    C("Convoluted Signal")--&gt;|FFT| D["Fourier Transformed Signal"]</div>
This is just the same as doing this: <div class="mermaid" align="center" height="70%" width="70%">
    flowchart LR
    flowchart LR
    A["Signal"]--&gt;|Convolution| C("Convoluted Signal")
    B["Kernel"]--&gt;|Convolution| C("Convoluted Signal")
    C("Convoluted Signal")--&gt;|FFT| D["Fourier Transformed Signal"]</div></p>
</div>

<p><a href="https://dsp.stackexchange.com/questions/4825/why-is-the-fft-mirrored">Why is the FFT ‚Äúmirrored‚Äù?</a></p>

<p><a href="https://e2eml.school/convolution_one_d.html">Convolution in one dimension for neural networks</a></p>

<p><a href="http://www.svcl.ucsd.edu/courses/ece271B-F09/handouts/DPK.pdf">Dot-product kernels in ml</a></p>

<p><a href="https://www.dcs.bbk.ac.uk/~ale/dsta/dsta-2/dsta-2018-19-zaki-meira-ch5-excerpt-v2.pdf">Kernel Methods</a></p>
:ET